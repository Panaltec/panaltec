{"remainingRequest":"/home/luciano/panalTec/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/luciano/panalTec/node_modules/ngx-echarts/fesm5/ngx-echarts.js","dependencies":[{"path":"/home/luciano/panalTec/node_modules/ngx-echarts/fesm5/ngx-echarts.js","mtime":1534752796000},{"path":"/home/luciano/panalTec/node_modules/cache-loader/dist/cjs.js","mtime":1536758645426},{"path":"/home/luciano/panalTec/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START rxjs,_angular_core,rxjs_operators,echarts PURE_IMPORTS_END */\nimport { of, empty, Subject } from 'rxjs';\nimport { Directive, ElementRef, Input, Output, HostListener, EventEmitter, NgZone, NgModule } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { init } from 'echarts';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ChangeFilter = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _changes\n     */\n    function ChangeFilter(_changes) {\n        this._changes = _changes;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChangeFilter.of = function (changes) {\n        return new ChangeFilter(changes);\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.notEmpty = function (key) {\n        if (this._changes[key]) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return empty();\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.has = function (key) {\n        if (this._changes[key]) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            return of(value);\n        }\n        return empty();\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.notFirst = function (key) {\n        if (this._changes[key] && !this._changes[key].isFirstChange()) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            return of(value);\n        }\n        return empty();\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.notFirstAndEmpty = function (key) {\n        if (this._changes[key] && !this._changes[key].isFirstChange()) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return empty();\n    };\n    return ChangeFilter;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar EChartEvents = /** @class */ /*@__PURE__*/ (function () { function EChartEvents() {\n} EChartEvents.Click = 'click'; EChartEvents.DblClick = 'dblclick'; EChartEvents.MouseDown = 'mousedown'; EChartEvents.MouseUp = 'mouseup'; EChartEvents.MouseOver = 'mouseover'; EChartEvents.MouseOut = 'mouseout'; EChartEvents.GlobalOut = 'globalout'; EChartEvents.ContextMenu = 'contextmenu'; EChartEvents.DataZoom = 'datazoom'; EChartEvents.All = [\n    EChartEvents.Click,\n    EChartEvents.DblClick,\n    EChartEvents.MouseDown,\n    EChartEvents.MouseUp,\n    EChartEvents.MouseOver,\n    EChartEvents.MouseOut,\n    EChartEvents.GlobalOut,\n    EChartEvents.ContextMenu,\n    EChartEvents.DataZoom,\n]; return EChartEvents; }());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxEchartsDirective = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} el\n     * @param {?} _ngZone\n     */\n    function NgxEchartsDirective(el, _ngZone) {\n        this.el = el;\n        this._ngZone = _ngZone;\n        this.autoResize = true;\n        this.loadingType = 'default';\n        /**\n         * Whether to register event handlers on echartInstance. Default is true.\n         * Use it to avoid unwanted change detection, if you want to optimize the performance.\n         */\n        this.detectEventChanges = true;\n        // chart events:\n        this.chartInit = new EventEmitter();\n        this.chartClick = new EventEmitter();\n        this.chartDblClick = new EventEmitter();\n        this.chartMouseDown = new EventEmitter();\n        this.chartMouseUp = new EventEmitter();\n        this.chartMouseOver = new EventEmitter();\n        this.chartMouseOut = new EventEmitter();\n        this.chartGlobalOut = new EventEmitter();\n        this.chartContextMenu = new EventEmitter();\n        this.chartDataZoom = new EventEmitter();\n        this.currentOffsetWidth = 0;\n        this.currentOffsetHeight = 0;\n        this._resize$ = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.createChart = function () {\n        var _this = this;\n        this.currentWindowWidth = window.innerWidth;\n        this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n        this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n        var /** @type {?} */ dom = this.el.nativeElement;\n        if (window && window.getComputedStyle) {\n            var /** @type {?} */ prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n            if ((!prop || prop === '0px') &&\n                (!dom.style.height || dom.style.height === '0px')) {\n                dom.style.height = '400px';\n            }\n        }\n        return this._ngZone.runOutsideAngular(function () { return init(dom, _this.theme || undefined, _this.initOpts || undefined); });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.onWindowResize = function (event) {\n        var /** @type {?} */ target = (event.target);\n        if (this.autoResize && target.innerWidth !== this.currentWindowWidth) {\n            this.currentWindowWidth = target.innerWidth;\n            this.currentOffsetWidth = this.el.nativeElement.offsetWidth;\n            this.currentOffsetHeight = this.el.nativeElement.offsetHeight;\n            this._resize$.next();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ filter = ChangeFilter.of(changes);\n        filter.notFirstAndEmpty('options').subscribe(function (opt) { return _this.onOptionsChange(opt); });\n        filter.notFirstAndEmpty('merge').subscribe(function (opt) { return _this.setOption(opt); });\n        filter.has('loading').subscribe(function (v) { return _this.toggleLoading(!!v); });\n        filter.notFirst('detectEventChanges').subscribe(function (v) { return _this.toggleEventDetectors(!!v); });\n        filter.notFirst('theme').subscribe(function () { return _this.refreshChart(); });\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngOnDestroy = function () {\n        if (this._resizeSub) {\n            this._resizeSub.unsubscribe();\n            this._resizeSub = null;\n        }\n        if (this._chart) {\n            this._chart.dispose();\n            this._chart = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngDoCheck = function () {\n        // No heavy work in DoCheck!\n        if (this._chart && this.autoResize) {\n            var /** @type {?} */ offsetWidth = this.el.nativeElement.offsetWidth;\n            var /** @type {?} */ offsetHeight = this.el.nativeElement.offsetHeight;\n            if (this.currentOffsetWidth !== offsetWidth || this.currentOffsetHeight !== offsetHeight) {\n                this.currentOffsetWidth = offsetWidth;\n                this.currentOffsetHeight = offsetHeight;\n                this._resize$.next();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        setTimeout(function () { return _this.initChart(); });\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.initChart = function () {\n        this.onOptionsChange(this.options);\n        if (this.merge && this._chart) {\n            this.setOption(this.merge);\n        }\n    };\n    /**\n     * @param {?} opt\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.onOptionsChange = function (opt) {\n        var _this = this;\n        if (opt) {\n            if (!this._chart) {\n                this._chart = this.createChart();\n                // subscribe to _resize$ and debounced\n                this._resizeSub = this._resize$.pipe(debounceTime(50)).subscribe(function () {\n                    if (_this._chart) {\n                        _this._chart.resize();\n                    }\n                });\n                // output echart instance:\n                this.chartInit.emit(this._chart);\n                // register events:\n                if (this.detectEventChanges) {\n                    this.registerEvents();\n                }\n            }\n            this._chart.setOption(this.options, true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.registerEvents = function () {\n        if (this._chart) {\n            var /** @type {?} */ events = EChartEvents.All;\n            for (var /** @type {?} */ i = 0, /** @type {?} */ len = events.length; i < len; i++) {\n                this._chart.on(events[i], this.eventHandler, this);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.unregisterEvents = function () {\n        if (this._chart) {\n            var /** @type {?} */ events = EChartEvents.All;\n            for (var /** @type {?} */ i = 0, /** @type {?} */ len = events.length; i < len; i++) {\n                this._chart.off(events[i], this.eventHandler);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.clear = function () {\n        if (this._chart) {\n            this._chart.clear();\n        }\n    };\n    /**\n     * @param {?} loading\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.toggleLoading = function (loading) {\n        if (this._chart) {\n            loading ? this._chart.showLoading(this.loadingType, this.loadingOpts) : this._chart.hideLoading();\n        }\n    };\n    /**\n     * @param {?} option\n     * @param {?=} opts\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.setOption = function (option, opts) {\n        if (this._chart) {\n            this._chart.setOption(option, opts);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.eventHandler = function (event) {\n        var _this = this;\n        switch (event.type) {\n            case EChartEvents.Click:\n                this._ngZone.run(function () { return _this.chartClick.emit(event); });\n                break;\n            case EChartEvents.DblClick:\n                this._ngZone.run(function () { return _this.chartDblClick.emit(event); });\n                break;\n            case EChartEvents.MouseDown:\n                this._ngZone.run(function () { return _this.chartMouseDown.emit(event); });\n                break;\n            case EChartEvents.MouseUp:\n                this._ngZone.run(function () { return _this.chartMouseUp.emit(event); });\n                break;\n            case EChartEvents.MouseOver:\n                this._ngZone.run(function () { return _this.chartMouseOver.emit(event); });\n                break;\n            case EChartEvents.MouseOut:\n                this._ngZone.run(function () { return _this.chartMouseOut.emit(event); });\n                break;\n            case EChartEvents.GlobalOut:\n                this._ngZone.run(function () { return _this.chartGlobalOut.emit(event); });\n                break;\n            case EChartEvents.ContextMenu:\n                this._ngZone.run(function () { return _this.chartContextMenu.emit(event); });\n                break;\n            case EChartEvents.DataZoom:\n                this._ngZone.run(function () { return _this.chartDataZoom.emit(event); });\n                break;\n        }\n    };\n    /**\n     * @param {?} detect\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.toggleEventDetectors = function (detect) {\n        if (this._chart) {\n            detect ? this.registerEvents() : this.unregisterEvents();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.refreshChart = function () {\n        this.ngOnDestroy();\n        this.initChart();\n    };\n    return NgxEchartsDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxEchartsModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxEchartsModule() {\n    }\n    return NgxEchartsModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { NgxEchartsModule, NgxEchartsDirective as ɵa };\n//# sourceMappingURL=ngx-echarts.js.map\n",null]}